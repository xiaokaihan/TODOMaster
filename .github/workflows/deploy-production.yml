name: 🚀 Deploy to Production (Vercel + Railway)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'packages/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: 🧪 运行测试
    runs-on: ubuntu-latest
    steps:
      - name: 📥 拉取代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 安装依赖
        run: yarn install --frozen-lockfile

      - name: 🏗️ 构建共享包
        run: yarn workspace @todomaster/shared build

      - name: 🧪 运行后端测试
        run: |
          cd packages/backend
          npm run test
        env:
          NODE_ENV: test

      - name: 🧪 运行前端测试
        run: |
          cd packages/frontend
          npm run test

  deploy-backend:
    name: 🔧 部署后端 (Railway)
    runs-on: ubuntu-latest
    needs: test
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📥 拉取代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 安装依赖
        run: yarn install --frozen-lockfile

      - name: 🏗️ 构建共享包
        run: yarn workspace @todomaster/shared build

      - name: 🏗️ 构建后端
        run: |
          cd packages/backend
          npm run build

      - name: 🚀 部署到 Railway
        id: deploy
        run: |
          npm install -g @railway/cli
          cd packages/backend
          
          # 部署到 Railway
          railway up --detach
          
          # 等待部署完成并获取URL
          sleep 30
          BACKEND_URL=$(railway status --json | jq -r '.deployments[0].url' || echo "")
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "✅ 后端部署完成: $BACKEND_URL"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-frontend:
    name: 🎨 部署前端 (Vercel)
    runs-on: ubuntu-latest
    needs: [test, deploy-backend]
    steps:
      - name: 📥 拉取代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 安装依赖
        run: yarn install --frozen-lockfile

      - name: 🏗️ 构建共享包
        run: yarn workspace @todomaster/shared build

      - name: ⚙️ 设置环境变量
        run: |
          cd packages/frontend
          echo "VITE_API_URL=${{ needs.deploy-backend.outputs.backend-url }}/api/v1" > .env.production

      - name: 🏗️ 构建前端
        run: |
          cd packages/frontend
          npm run build:vercel

      - name: 🚀 部署到 Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: packages/frontend

  health-check:
    name: 🔍 健康检查
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    steps:
      - name: 🔍 检查后端服务
        run: |
          BACKEND_URL="${{ needs.deploy-backend.outputs.backend-url }}"
          if [ -n "$BACKEND_URL" ]; then
            echo "检查后端服务: $BACKEND_URL"
            for i in {1..5}; do
              if curl -f "$BACKEND_URL/health"; then
                echo "✅ 后端服务正常"
                break
              else
                echo "⏳ 等待后端服务启动... ($i/5)"
                sleep 30
              fi
            done
          fi

      - name: 📊 部署总结
        run: |
          echo "🎉 部署完成！"
          echo "📋 部署信息:"
          echo "   - 环境: Production"
          echo "   - 后端: Railway (${{ needs.deploy-backend.outputs.backend-url }})"
          echo "   - 前端: Vercel"
          echo "   - 分支: ${{ github.ref_name }}"
          echo "   - 提交: ${{ github.sha }}"

  notify:
    name: 📢 通知
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, health-check]
    if: always()
    steps:
      - name: 📢 发送通知
        run: |
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "✅ 部署成功！"
            echo "🔗 前端地址: https://${{ secrets.VERCEL_PROJECT_ID }}.vercel.app"
            echo "🔗 后端地址: ${{ needs.deploy-backend.outputs.backend-url }}"
          else
            echo "❌ 部署失败，请检查日志"
          fi 