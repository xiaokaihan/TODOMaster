version: '3.8'

services:
  # PostgreSQL 数据库
  database:
    image: postgres:15-alpine
    container_name: todomaster-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USERNAME:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-123456}
      POSTGRES_DB: ${DB_NAME:-todomaster}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - todomaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-admin} -d ${DB_NAME:-todomaster}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      target: production
    container_name: todomaster-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-todomaster}
      DB_USERNAME: ${DB_USERNAME:-admin}
      DB_PASSWORD: ${DB_PASSWORD:-123456}
      DB_SSL: false
      JWT_SECRET: ${JWT_SECRET:-todomaster_jwt_secret_key_production_2024}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      API_PREFIX: /api/v1
    ports:
      - "3000:3000"
    networks:
      - todomaster-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 前端服务（生产环境使用nginx）
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      target: production
    container_name: todomaster-frontend-prod
    environment:
      NGINX_HOST: localhost
      NGINX_PORT: 80
    ports:
      - "80:80"
      - "443:443"
    networks:
      - todomaster-network
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Redis缓存（可选，用于session存储）
  redis:
    image: redis:7-alpine
    container_name: todomaster-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123456}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - todomaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  todomaster-network:
    driver: bridge 